# sample selection
gsms <- "000111222333XXXXX"
sml <- strsplit(gsms, split="")[[1]]
# filter out excluded samples (marked as "X")
sel <- which(sml != "X")
sml <- sml[sel]
tbl <- tbl[ ,sel]
# group membership for samples
gs <- factor(sml)
groups <- make.names(c("mock","iia","iib","i"))
levels(gs) <- groups
sample_info <- data.frame(Group = gs, row.names = colnames(tbl))
sel
apath
groups
gs
gsms
sel
sml
urld
View(sample_info)
View(tbl)
View(annot)
# pre-filter low count genes
# keep genes with at least N counts > 10, where N = size of smallest group
keep <- rowSums( tbl >= 10 ) >= min(table(gs))
tbl <- tbl[keep, ]
ds <- DESeqDataSetFromMatrix(countData=tbl, colData=sample_info, design= ~Group)
ds <- DESeq(ds, test="LRT", reduced = ~ 1)  # Use LRT for all-around gene ranking
# extract results for top genes table
r <- results (ds, alpha=0.05, pAdjustMethod ="fdr")
tT <- r[order(r$padj)[1:250],]
tT <- merge(as.data.frame(tT), annot, by=0, sort=F)
tT <- subset(tT, select=c("GeneID","padj","pvalue","stat","baseMean","Symbol","Description"))
write.table(tT, file=stdout(), row.names=F, sep="\t")
plotDispEsts(ds, main="GSE219036 Dispersion Estimates")
# create histogram plot of p-values
hist(r$padj, breaks=seq(0, 1, length = 21), col = "grey", border = "white",
xlab = "", ylab = "", main = "GSE219036 Frequencies of padj-values")
# Wald test to obtain contrast-specific results
ds <- DESeq(ds, test="Wald", sfType="poscount")
r <- results (ds, contrast=c("Group", groups[1], groups[2]), alpha=0.05, pAdjustMethod = "fdr")
# volcano plot
old.pal <- palette(c("#00BFFF", "#FF3030")) # low-hi colors
par(mar=c(4,4,2,1), cex.main=1.5)
plot(r$log2FoldChange, -log10(r$padj), main=paste(groups[1], "vs", groups[2]),
xlab="log2FC", ylab="-log10(Padj)", pch=20, cex=0.5)
# volcano plot
old.pal <- palette(c("#00BFFF", "#FF3030")) # low-hi colors
par(mar=c(4,4,2,1), cex.main=1.5)
plot(r$log2FoldChange, -log10(r$padj), main=paste(groups[1], "vs", groups[2]),
xlab="log2FC", ylab="-log10(Padj)", pch=20, cex=0.5)
with(subset(r, padj<0.05 & abs(log2FoldChange) >= 0),
points(log2FoldChange, -log10(padj), pch=20, col=(sign(log2FoldChange) + 3)/2, cex=1))
legend("bottomleft", title=paste("Padj<", 0.05, sep=""), legend=c("down", "up"), pch=20,col=1:2)
# MD plot
par(mar=c(4,4,2,1), cex.main=1.5)
plot(log10(r$baseMean), r$log2FoldChange, main=paste(groups[1], "vs", groups[2]),
xlab="log10(mean of normalized counts)", ylab="log2FoldChange", pch=20, cex=0.5)
with(subset(r, padj<0.05 & abs(log2FoldChange) >= 0),
points(log10(baseMean), log2FoldChange, pch=20, col=(sign(log2FoldChange) + 3)/2, cex=1))
legend("bottomleft", title=paste("Padj<", 0.05, sep=""), legend=c("down", "up"), pch=20,col=1:2)
abline(h=0)
palette(old.pal) # restore palette
# Venn diagram
library(gplots)
all_res <- list()
ct.names <- resultsNames(ds)[-1] # contrasts names without Intercept
for (ct in ct.names) {
r <- results(ds, name=ct, alpha=0.05, pAdjustMethod = "fdr")
all_res[[length(all_res) + 1]] <- rownames(r)[!is.na(r$padj) & r$padj < 0.05 & abs(r$log2FoldChange) >= 0]
}
names(all_res) <- ct.names
venn(all_res)
################################################################
#   General expression data visualization
dat <- log10(counts(ds, normalized = T) + 1) # extract normalized counts
# box-and-whisker plot
lbl <- "log10(raw counts + 1)"
ord <- order(gs)  # order samples by group
# Version info: R 4.2.2, Biobase 2.58.0, GEOquery 2.66.0, limma 3.54.0
################################################################
#   Differential expression analysis with DESeq2
library(DESeq2)
# load counts table from GEO
urld <- "https://www.ncbi.nlm.nih.gov/geo/download/?format=file&type=rnaseq_counts"
path <- paste(urld, "acc=GSE219036", "file=GSE219036_raw_counts_GRCh38.p13_NCBI.tsv.gz", sep="&");
tbl <- as.matrix(data.table::fread(path, header=T, colClasses="integer"), rownames="GeneID")
# load gene annotations
apath <- paste(urld, "type=rnaseq_counts", "file=Human.GRCh38.p13.annot.tsv.gz", sep="&")
annot <- data.table::fread(apath, header=T, quote="", stringsAsFactors=F, data.table=F)
rownames(annot) <- annot$GeneID
# sample selection
gsms <- "000111222333XXXXX"
sml <- strsplit(gsms, split="")[[1]]
# filter out excluded samples (marked as "X")
sel <- which(sml != "X")
sml <- sml[sel]
tbl <- tbl[ ,sel]
# group membership for samples
gs <- factor(sml)
groups <- make.names(c("mock","iia","iib","i"))
levels(gs) <- groups
sample_info <- data.frame(Group = gs, row.names = colnames(tbl))
# pre-filter low count genes
# keep genes with at least N counts > 10, where N = size of smallest group
keep <- rowSums( tbl >= 10 ) >= min(table(gs))
tbl <- tbl[keep, ]
ds <- DESeqDataSetFromMatrix(countData=tbl, colData=sample_info, design= ~Group)
ds <- DESeq(ds, test="LRT", reduced = ~ 1)  # Use LRT for all-around gene ranking
# extract results for top genes table
r <- results (ds, alpha=0.05, pAdjustMethod ="fdr")
tT <- r[order(r$padj)[1:250],]
tT <- merge(as.data.frame(tT), annot, by=0, sort=F)
tT <- subset(tT, select=c("GeneID","padj","pvalue","stat","baseMean","Symbol","Description"))
write.table(tT, file=stdout(), row.names=F, sep="\t")
plotDispEsts(ds, main="GSE219036 Dispersion Estimates")
# create histogram plot of p-values
hist(r$padj, breaks=seq(0, 1, length = 21), col = "grey", border = "white",
xlab = "", ylab = "", main = "GSE219036 Frequencies of padj-values")
# Wald test to obtain contrast-specific results
ds <- DESeq(ds, test="Wald", sfType="poscount")
r <- results (ds, contrast=c("Group", groups[1], groups[2]), alpha=0.05, pAdjustMethod = "fdr")
# volcano plot
old.pal <- palette(c("#00BFFF", "#FF3030")) # low-hi colors
par(mar=c(4,4,2,1), cex.main=1.5)
plot(r$log2FoldChange, -log10(r$padj), main=paste(groups[1], "vs", groups[2]),
xlab="log2FC", ylab="-log10(Padj)", pch=20, cex=0.5)
with(subset(r, padj<0.05 & abs(log2FoldChange) >= 0),
points(log2FoldChange, -log10(padj), pch=20, col=(sign(log2FoldChange) + 3)/2, cex=1))
legend("bottomleft", title=paste("Padj<", 0.05, sep=""), legend=c("down", "up"), pch=20,col=1:2)
# MD plot
par(mar=c(4,4,2,1), cex.main=1.5)
plot(log10(r$baseMean), r$log2FoldChange, main=paste(groups[1], "vs", groups[2]),
xlab="log10(mean of normalized counts)", ylab="log2FoldChange", pch=20, cex=0.5)
with(subset(r, padj<0.05 & abs(log2FoldChange) >= 0),
points(log10(baseMean), log2FoldChange, pch=20, col=(sign(log2FoldChange) + 3)/2, cex=1))
legend("bottomleft", title=paste("Padj<", 0.05, sep=""), legend=c("down", "up"), pch=20,col=1:2)
abline(h=0)
palette(old.pal) # restore palette
# Venn diagram
library(gplots)
all_res <- list()
ct.names <- resultsNames(ds)[-1] # contrasts names without Intercept
for (ct in ct.names) {
r <- results(ds, name=ct, alpha=0.05, pAdjustMethod = "fdr")
all_res[[length(all_res) + 1]] <- rownames(r)[!is.na(r$padj) & r$padj < 0.05 & abs(r$log2FoldChange) >= 0]
}
names(all_res) <- ct.names
venn(all_res)
################################################################
#   General expression data visualization
dat <- log10(counts(ds, normalized = T) + 1) # extract normalized counts
# box-and-whisker plot
lbl <- "log10(raw counts + 1)"
ord <- order(gs)  # order samples by group
palette(c("#1B9E77", "#7570B3", "#E7298A", "#E6AB02", "#D95F02",
"#66A61E", "#A6761D", "#B32424", "#B324B3", "#666666"))
par(mar=c(7,4,2,1))
boxplot(dat[,ord], boxwex=0.6, notch=T, main="GSE219036", ylab="lg(norm.counts)", outline=F, las=2, col=gs[ord])
legend("topleft", groups, fill=palette(), bty="n")
# UMAP plot (multi-dimensional scaling)
library(umap)
dat <- dat[!duplicated(dat), ] # first remove duplicates
par(mar=c(3,3,2,6), xpd=TRUE, cex.main=1.5)
ump <- umap(t(dat), n_neighbors = 5, random_state = 123)
plot(ump$layout, main="UMAP plot, nbrs=5", xlab="", ylab="", col=gs, pch=20, cex=1.5)
legend("topright", inset=c(-0.15,0), legend=groups, pch=20,
col=1:length(groups), title="Group", pt.cex=1.5)
library(DESeq2)
library(DESeq2)
library(pheatmap)
# Specify the file path to your TSV file
file_path <- "D:/JP_MHB/AlphaMissense_aa_substitutions.tsv"
# Using read.table()
data <- read.table(file_path, header = TRUE, sep = "\t")
View(data)
write.csv(data,file="AlphaMissense_aa_substitutions")
write.csv(data,"AlphaMissense_aa_substitutions.csv", row.names = FALSE)
# Specify the file path to your TSV file
file_path <- "D:/JP_MHB/AlphaMissense_aa_substitutions.tsv"
getwd()
# Install and load the clusterProfiler package
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("clusterProfiler")
library(clusterProfiler)
# Load your gene list
my_gene_list <- c("WDR37", "NFAT5", "ICAM5", "ICAM5",
"ICAM5", "ELL", "PLAGL1", "DHX38", "GATA6", "ZNF212", "CBX6")  # Replace with your gene symbols
# Load the gene-to-GO mapping data (use the appropriate organism database)
if (!requireNamespace("org.Hs.eg.db", quietly = TRUE))
BiocManager::install("org.Hs.eg.db")
library(org.Hs.eg.db)
# Perform GO enrichment analysis (Biological Process)
go_enrichment <- enrichGO(
gene          = my_gene_list,
OrgDb         = org.Hs.eg.db,  # Replace with the appropriate organism database
keyType       = "SYMBOL",
ont           = "BP",  # BP for Biological Process, MF for Molecular Function, CC for Cellular Component
pAdjustMethod = "fdr",  # Adjust p-values for multiple testing
pvalueCutoff  = 0.05
)
# View the results
summary(go_enrichment)
# View the results using as.data.frame
result_df <- as.data.frame(go_enrichment)
# View the results
print(result_df)
View(go_enrichment)
go_enrichment@result
# View the results
summary(go_enrichment)
# View the results using as.data.frame
result_df <- as.data.frame(go_enrichment)
# View the results
print(result_df)
# Perform GO enrichment analysis (Biological Process)
go_enrichment <- enrichGO(
gene          = my_gene_list,
OrgDb         = org.Hs.eg.db,  # Replace with the appropriate organism database
keyType       = "SYMBOL",
ont           = "MF",  # BP for Biological Process, MF for Molecular Function, CC for Cellular Component
pAdjustMethod = "fdr",  # Adjust p-values for multiple testing
pvalueCutoff  = 0.05
)
# View the results
summary(go_enrichment)
# Perform GO enrichment analysis (Biological Process)
go_enrichment <- enrichGO(
gene          = my_gene_list,
OrgDb         = org.Hs.eg.db,  # Replace with the appropriate organism database
keyType       = "SYMBOL",
ont           = "CC",  # BP for Biological Process, MF for Molecular Function, CC for Cellular Component
pAdjustMethod = "fdr",  # Adjust p-values for multiple testing
pvalueCutoff  = 0.05
)
# View the results
summary(go_enrichment)
View(go_enrichment)
go_enrichment@result[["Description"]]
x<-go_enrichment@result
View(x)
clear
#
#
#
library(DESeq2)
library(pheatmap)
library(dplyr)
library(RColorBrewer)
library(ggplot2)
library(ggrepel)
getwd()
#set the working directory
setwd("D:/DWCT/M_Analysis_Ajit_Sir/GSE233233/DGE_FINAL")
#load the count data
count_data <- read.csv("Count_Data_final.csv", header=TRUE,row.names = 1)
count_data<- count_data[,1:18]
colnames(count_data)
head(count_data)
#load the sample info
#sample_info1 <- read.csv("meta_keratinocyte.csv")
sample_info <- read.csv("Meta_Data_final.csv", header = TRUE,row.names = 1)
sample_info <- sample_info[1:18, ]
#colData1 <- read.csv("meta_keratinocyte.csv", header = T, sep = '\t',
#                     stringsAsFactors = TRUE)
#colData <- read.csv("meta_keratinocyte.csv", header = TRUE,row.names = 1)
colnames(sample_info)
head(sample_info)
dim(sample_info)
#set factor levels
sample_info$agent <- factor(sample_info$agent)
sample_info$Time_point <- factor(sample_info$Time_point)
sample_info$tissue <- factor(sample_info$tissue)
# Convert non-integer values to integers in count data
count_data <- round(count_data)
head(count_data)
# Create a new count data object
new_count_data <- as.matrix(count_data)
head(new_count_data)
unique(sample_info$agent)
unique(sample_info$Time_point)
unique(sample_info$tissue)
dim(count_data)
dim(new_count_data)
dim(sample_info)
# Generate the DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = new_count_data, colData = sample_info, design = ~ Time_point)
# Perform DESeq2 analysis
dds <- DESeq(dds)
head(dds)
#set the factor level
#dds$Treatment <- factor(dds$agent, levels = c ("control","Salt stress"))
#filter the genes
keep <- rowSums(counts(dds)) >= 5
dds <- dds[keep,]
dds
#set the referene for the treatment factor
dds$Time_point<- relevel(dds$Time_point , ref = "0h")
dds$Time_point
#perform the statistical tests to identify differentialy expressed genes
dds <- DESeq(dds)
head(dds)
#save the normalized counts
normalize_counts <- counts(dds,normalized=TRUE)
head(normalize_counts)
dim(normalize_counts)
write.csv(normalize_counts,"Salt stress_vs_0h.csv")
#Identify available coefficient names
coeff_names <- resultsNames(dds)
#Print the coefficient names
print(coeff_names)
#[[1] "Intercept"            "Time_point_12h_vs_0h" "Time_point_24h_vs_0h"
#[4] "Time_point_48h_vs_0h" "Time_point_6h_vs_0h"  "Time_point_96h_vs_0h"
######################################## "Time_point_12h_vs_0h"  ################################################
resLFC <- lfcShrink(dds, coef ="Time_point_12h_vs_0h", type = "apeglm")
#change resLFC to a dataframe
resLFC <- as.data.frame(resLFC)
XX<-read.csv("Gene ID.csv")
top <- XX$Gene.ID
top <- as.character(top)
Y<-resLFC <- resLFC[top, ]
write.csv(Y, file = "LFC_12h.csv")
######################################## "Time_point_24h_vs_0h" ################################################
resLFC <- lfcShrink(dds, coef ="Time_point_24h_vs_0h", type = "apeglm")
resLFC<- as.data.frame(resLFC)
#change resLFC to a dataframe
resLFC1 <- as.data.frame(resLFC)
XX<-read.csv("Gene ID.csv")
top <- XX$Gene.ID
print(top)
top <- as.character(top)
Y<- resLFC1[top, ]
write.csv(Y, file = "LFC_24h.csv")
######################################## "Time_point_48h_vs_0h" ################################################
resLFC <- lfcShrink(dds, coef ="Time_point_48h_vs_0h", type = "apeglm")
#change resLFC to a dataframe
resLFC <- as.data.frame(resLFC)
XX<-read.csv("Gene ID.csv")
top <- XX$Gene.ID
top <- as.character(top)
Y<-resLFC <- resLFC[top, ]
write.csv(Y, file = "LFC_48h.csv")
######################################## "Time_point_6h_vs_0h" ################################################
resLFC <- lfcShrink(dds, coef ="Time_point_6h_vs_0h", type = "apeglm")
#change resLFC to a dataframe
resLFC <- as.data.frame(resLFC)
XX<-read.csv("Gene ID.csv")
top <- XX$Gene.ID
top <- as.character(top)
Y<-resLFC <- resLFC[top, ]
write.csv(Y, file = "LFC_6h.csv")
######################################## "Time_point_96h_vs_0h" ################################################
resLFC <- lfcShrink(dds, coef ="Time_point_96h_vs_0h", type = "apeglm")
#change resLFC to a dataframe
resLFC <- as.data.frame(resLFC)
XX<-read.csv("Gene ID.csv")
top <- XX$Gene.ID
top <- as.character(top)
Y<-resLFC <- resLFC[top, ]
write.csv(Y, file = "LFC_96h.csv")
View(resLFC)
resLFC <- lfcShrink(dds, coef ="Time_point_96h_vs_0h", type = "apeglm")
#change resLFC to a dataframe
resLFC <- as.data.frame(resLFC)
XX<-read.csv("Gene ID.csv")
top <- XX$Gene.ID
top <- as.character(top)
View(resLFC)
#
#
#
library(DESeq2)
library(pheatmap)
library(dplyr)
library(RColorBrewer)
library(ggplot2)
library(ggrepel)
getwd()
#set the working directory
setwd("D:/DWCT/DOT_apu_project/aBiotic")
#load the count data
count_data <- read.csv("GSE186317_replicatewise_fpkm.csv", header=TRUE,row.names = 1)
colnames(count_data)
head(count_data)
#load the sample info
#sample_info1 <- read.csv("meta_keratinocyte.csv")
sample_info <- read.csv("Meta_data.csv", header = TRUE,row.names = 1)
#colData1 <- read.csv("meta_keratinocyte.csv", header = T, sep = '\t',
#                     stringsAsFactors = TRUE)
#colData <- read.csv("meta_keratinocyte.csv", header = TRUE,row.names = 1)
colnames(sample_info)
head(sample_info)
#set factor levels
sample_info$treatment <- factor(sample_info$treatment)
#sample_info$Time_point <- factor(sample_info$Time_point)
#sample_info$tissue <- factor(sample_info$tissue)
# Convert non-integer values to integers in count data
count_data <- round(count_data)
head(count_data)
# Create a new count data object
new_count_data <- as.matrix(count_data)
head(new_count_data)
unique(sample_info$treatment)
#unique(sample_info$Time_point)
#unique(sample_info$tissue)
dim(count_data)
dim(new_count_data)
dim(sample_info)
#design <- ~ agent + Time_point + agent:Time_point
# Generate the DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = new_count_data, colData = sample_info, design = ~ treatment )
# Perform DESeq2 analysis
dds <- DESeq(dds)
head(dds)
#set the factor level
#dds$treatment <- factor(dds$treatment, levels = c ("Control","Water deficit","Heat stress","Combined water deficit and heat stress"))
#filter the genes
keep <- rowSums(counts(dds)) >= 5
dds <- dds[keep,]
dds
#set the referene for the treatment factor
dds$treatment <- relevel(dds$treatment , ref = "Control")
dds$treatment
#perform the statistical tests to identify differentialy expressed genes
dds <- DESeq(dds)
head(dds)
#save the normalized counts
normalize_counts <- counts(dds,normalized=TRUE)
head(normalize_counts)
dim(normalize_counts)
write.csv(normalize_counts,"Salt stress_vs_control.csv")
#Identify available coefficient names
coeff_names <- resultsNames(dds)
#Print the coefficient names
print(coeff_names)
#[1] "Intercept"
#[2] "treatment_Combined.water.deficit.and.heat.stress._vs_Control."
#[3] "treatment_Heat.stress._vs_Control."
#[4] "treatment_Water.deficit._vs_Control."
######################################## "Time_point_12h_vs_0h"  ################################################
resLFC <- lfcShrink(dds, coef ="treatment_Heat.stress_vs_Control", type = "apeglm")
#change resLFC to a dataframe
resLFC <- as.data.frame(resLFC)
head(resLFC)
Top1<-resLFC1$X
XX<-read.csv("Dot_aPU_45_gene.csv")
top <- XX$Gene_id
top <- as.character(top)
Y<- resLFC[top, ]
write.csv(Y, file = "treatment_Heat.stress_vs_Control.csv")
######################################## "Time_point_24h_vs_0h" ################################################
resLFC <- lfcShrink(dds, coef ="treatment_Water.deficit_vs_Control"  , type = "apeglm")
resLFC<- as.data.frame(resLFC)
#change resLFC to a dataframe
resLFC1 <- as.data.frame(resLFC)
XX<-read.csv("Dot_aPU_45_gene.csv")
top <- XX$Gene_id
print(top)
top <- as.character(top)
Y<- resLFC1[top, ]
write.csv(Y, file = "treatment_Water.deficit_vs_Control.csv")
######################################## "Time_point_48h_vs_0h" ################################################
resLFC <- lfcShrink(dds, coef ="treatment_Combined.water.deficit.and.heat.stress._vs_Control"  , type = "apeglm")
View(resLFC)
######################################## "Time_point_12h_vs_0h"  ################################################
resLFC <- lfcShrink(dds, coef ="treatment_Heat.stress_vs_Control", type = "apeglm")
#change resLFC to a dataframe
resLFC <- as.data.frame(resLFC)
head(resLFC)
Top1<-resLFC1$X
XX<-read.csv("Dot_aPU_45_gene1.csv")
top <- XX$Gene_id
top <- as.character(top)
Y<- resLFC[top, ]
write.csv(Y, file = "treatment_Heat.stress_vs_Control.csv")
resLFC <- lfcShrink(dds, coef ="treatment_Heat.stress_vs_Control", type = "apeglm")
#change resLFC to a dataframe
resLFC <- as.data.frame(resLFC)
head(resLFC)
Top1<-resLFC1$X
XX<-read.csv("Dot_aPU_45_gene1.csv")
top <- XX$Gene_id
top <- as.character(top)
Y<- resLFC[top, ]
write.csv(Y, file = "treatment_Heat.stress_vs_Control.csv")
write.csv(Y, file = "treatment_Heat.stress_vs_Control.csv")
View(Y)
###################################### "Time_point_24h_vs_0h" ################################################
resLFC <- lfcShrink(dds, coef ="treatment_Water.deficit_vs_Control"  , type = "apeglm")
resLFC<- as.data.frame(resLFC)
#change resLFC to a dataframe
resLFC1 <- as.data.frame(resLFC)
XX<-read.csv("Dot_aPU_45_gene1.csv")
top <- XX$Gene_id
print(top)
top <- as.character(top)
Y<- resLFC1[top, ]
write.csv(Y, file = "treatment_Water.deficit_vs_Control.csv")
######################################## "Time_point_48h_vs_0h" ################################################
resLFC <- lfcShrink(dds, coef ="treatment_Combined.water.deficit.and.heat.stress._vs_Control"  , type = "apeglm")
resLFC <- lfcShrink(dds, coef ="treatment_Combined.water.deficit.and.heat.stress_vs_Control"  , type = "apeglm")
resLFC<- as.data.frame(resLFC)
#change resLFC to a dataframe
resLFC1 <- as.data.frame(resLFC)
XX<-read.csv("Dot_aPU_45_gene1.csv")
top <- XX$Gene_id
print(top)
top <- as.character(top)
Y<- resLFC1[top, ]
write.csv(Y, file = "treatment_Combined.water.deficit.and.heat.stress_vs_Control.csv")
